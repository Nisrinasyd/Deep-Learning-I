# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/welcome.ipynb
"""

import numpy as np
import matplotlib.pyplot as plt

# Load the dataset
data = np.array([
    [20, 88.6], [16, 71.6], [19.8, 93.3], [18.4, 84.3], [17.1, 80.6],
    [15.5, 75.2], [14.7, 69.7], [17.1, 82.0], [15.4, 69.4], [16.2, 83.3],
    [15.0, 79.6], [17.2, 82.6], [16.0, 80.6], [17.0, 83.5], [14.4, 76.3]
])

x = data[:, 0]
y = data[:, 1]
m = len(x)

plt.scatter(x, y, marker='o', c='b')
plt.title('Cricket chirps vs temperature')
plt.xlabel('chirps/sec for striped ground crickets')
plt.ylabel('temperature in degrees Fahrenheit')
plt.xlim([13, 21])
plt.ylim([65, 95])
plt.show()

# Linear model
h = lambda theta0, theta1, x: theta0 + theta1 * x

# Cost function
cost = lambda theta0, theta1, x_i, y_i: 0.5 * (h(theta0, theta1, x_i) - y_i)**2

theta = np.array([0.0, 0.0])      # [theta_0, theta_1]
velocity = np.array([0.0, 0.0])   # momentum vector
alpha = 0.01                      # learning rate
gamma = 0.9                       # momentum coefficient
epochs = 100

cost_history = []

for epoch in range(epochs):
    for i in range(m):
        xi, yi = x[i], y[i]
        error = h(theta[0], theta[1], xi) - yi
        grad = np.array([error, error * xi])

        velocity = gamma * velocity + alpha * grad
        theta -= velocity

        cost_history.append(cost(theta[0], theta[1], xi, yi))

print("Final model parameters:")
print("theta_0 =", theta[0])
print("theta_1 =", theta[1])

plt.plot(cost_history)
plt.title("Cost over iterations (SGD with Momentum)")
plt.xlabel("Iteration")
plt.ylabel("Cost")
plt.grid(True)
plt.show()

xx = np.linspace(min(x), max(x), 100)
yy = h(theta[0], theta[1], xx)

plt.scatter(x, y, color='blue', label='Data')
plt.plot(xx, yy, color='red', label='Fitted Line')
plt.xlabel('chirps/sec')
plt.ylabel('temperature in degrees Fahrenheit')
plt.title('Linear regression with momentum')
plt.legend()
plt.grid(True)
plt.show()

from scipy import stats
result = stats.linregress(x, y)
print("theta_0 (actual):", result.intercept)
print("theta_1 (actual):", result.slope)